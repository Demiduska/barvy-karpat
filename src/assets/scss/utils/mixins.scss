/* Mixins:
   ========================================================================== */

// px to rem
@function rem($pixels, $context: $mainFontSize) {
  @if (unitless($pixels)) {
    $pixels: $pixels * 1px;
  }
  @if (unitless($context)) {
    $context: $context * 1px;
  }
  @return $pixels / $context * 1rem;
}

// size to one line
@mixin size($width, $height: $width) {
  width: $width;
  height: $height;
}

// placeholder helper
@mixin placeholder {
  ::-webkit-input-placeholder {
    @content;
  }
  :-moz-placeholder {
    @content;
  }
  ::-moz-placeholder {
    @content;
  }
  :-ms-input-placeholder {
    @content;
  }
}
@function convert-angle($value, $unit) {
  $convertable-units: deg grad turn rad;
  $conversion-factors: 1 (10grad/9deg) (1turn/360deg) (3.1415926rad/180deg);
  @if index($convertable-units, unit($value)) and index($convertable-units, $unit) {
    @return $value
             / nth($conversion-factors, index($convertable-units, unit($value)))
             * nth($conversion-factors, index($convertable-units, $unit));
  }

  @warn "Cannot convert `#{unit($value)}` to `#{$unit}`.";
}

/// Test if `$value` is an angle
/// @param {*} $value - Value to test
/// @return {Bool}
@function is-direction($value) {
  $is-direction: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);
  $is-angle: type-of($value) == 'number' and index('deg' 'grad' 'turn' 'rad', unit($value));

  @return $is-direction or $is-angle;
}

/// Convert a direction to legacy syntax
/// @param {Keyword | Angle} $value - Value to convert
/// @require {function} is-direction
/// @require {function} convert-angle
@function legacy-direction($value) {
  @if is-direction($value) == false {
    @warn "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be an angle or a direction";
  }

  $conversion-map: (
    to top          : bottom,
    to top right    : bottom left,
    to right top    : left bottom,
    to right        : left,
    to bottom right : top left,
    to right bottom : left top,
    to bottom       : top,
    to bottom left  : top right,
    to left bottom  : right top,
    to left         : right,
    to left top     : right bottom,
    to top left     : bottom right
  );

  @if map-has-key($conversion-map, $value) {
    @return map-get($conversion-map, $value);
  }

  @return 90deg - convert-angle($value, 'deg');
}

/// Mixin printing a linear-gradient
/// as well as a plain color fallback
/// and the `-webkit-` prefixed declaration
/// @access public
/// @param {String | List | Angle} $direction - Linear gradient direction
/// @param {Arglist} $color-stops - List of color-stops composing the gradient
@mixin linear-gradient($direction, $color-stops...) {
  @if is-direction($direction) == false {
    $color-stops: ($direction, $color-stops);
    $direction: 180deg;
  }

  background: nth(nth($color-stops, 1), 1);
  background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
  background: linear-gradient($direction, $color-stops);
}
/* Fonts Helpers:
   Read more: https://github.com/vedees/webpack-template/blob/master/README.md#add-fonts
   ========================================================================== */

/*
  By default template support only modern format fonts
  Without svg. Only: .woff, .woffs
  if ypu need svg comments lines bellow and uncomments "Fonts helper all format fonts"

  Usage:
    1. Put your font to `src/assets/fonts/FOLDERNAME/FONTNAME`
      FOLLOW: Files Required
      Example: .woff, .woffs formats
    2. Go to fonts.scss
    3. Use mixon
      Example: @include font-face("OpenSans", "../fonts/OpenSans/opensans");

    Required parameters: @family, @family
    Minor parameters: @weight, @style, @pipeline

    Example Base:
      @include font-face("OpenSans", "../fonts/OpenSans/opensans");
    Example Situation:
      @include font-face("OpenSans", "../fonts/OpenSans/opensansItalic", 400, italic);
*/

// Default: For modern format fonts
// Files Required: .woff, .woffs

@mixin font-face(
  $font-family,
  $file-path,
  $weight: normal,
  $style: normal,
  $asset-pipeline: false
) {
  @font-face {
    font-family: $font-family;
    font-weight: $weight;
    font-style: $style;

    src: url("#{$file-path}.woff") format("woff"),
      url("#{$file-path}.woff2") format("woff2");
  }
}

// For Modern format fonts + .svg
// Files Required: .woff, .woffs, .svg


// @mixin font-face(
//   $font-family,
//   $file-path,
//   $weight: normal,
//   $style: normal,
//   $asset-pipeline: false
// ) {
//   @font-face {
//     font-family: $font-family;
//     font-weight: $weight;
//     font-style: $style;

//     src: url("#{$file-path}.eot?#iefix") format("embedded-opentype"),
//       url("#{$file-path}.woff") format("woff"),
//       url("#{$file-path}.woff2") format("woff2"),
//       url("#{$file-path}.svg") format("svg"),
//       url("#{$file-path}.ttf") format("truetype");
//   }
// }

// For Modern format fonts + .svg
// Files Required: eot. .woff, .woffs, .svg, .ttf

 //@mixin font-face(
 //  $font-family,
 //  $file-path,
 //  $weight: normal,
 //  $style: normal,
 //  $asset-pipeline: false
 //) {
 //  @font-face {
 //    font-family: $font-family;
 //    font-weight: $weight;
 //    font-style: $style;
 //    src: url("#{$file-path}.eot?#iefix") format("embedded-opentype"),
 //      url("#{$file-path}.woff") format("woff"),
 //      url("#{$file-path}.woff2") format("woff2"),
 //      url("#{$file-path}.svg") format("svg"),
 //      url("#{$file-path}.ttf") format("truetype");
 //  }
 //}
